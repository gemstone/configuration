<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Gemstone.Configuration</name>
  </assembly>
  <members>
    <member name="T:Gemstone.Configuration.ConfigurationBuilderExtensions">
      <summary>
            Defines extensions for setting up configuration defaults for Gemstone projects.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ConfigurationBuilderExtensions.ConfigureGemstoneDefaults(Microsoft.Extensions.Configuration.IConfigurationBuilder,Gemstone.Configuration.Settings)">
      <summary>
            Configures the builder using the defined settings from Gemstone project configuration sources.
            </summary>
      <param name="builder">The configuration builder.</param>
      <param name="settings">Settings for configuring default sources.</param>
      <returns>The configuration builder.</returns>
      <remarks>
            This extension function configures common configuration sources for a Gemstone project. The
            <see cref="T:Gemstone.Configuration.Settings" /> instance controls the configuration sources that are available. Handling
            of settings are defined in a hierarchy where the settings are loaded are in the following
            priority order, from lowest to hightest:
            <list type="bullet"><item>INI file (defaults.ini) - Machine Level</item><item>INI file (settings.ini) - Machine Level</item><item>SQLite database (settings.db) - User Level</item><item>Environment variables - Machine Level</item><item>Environment variables - User Level</item></list></remarks>
    </member>
    <member name="M:Gemstone.Configuration.ConfigurationBuilderExtensions.ConfigureGemstoneDefaults(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Gemstone.Configuration.AppSettings.IAppSettingsBuilder},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Configures the builder using the default configuration sources for Gemstone projects.
            </summary>
      <param name="builder">The configuration builder.</param>
      <param name="configureAppSettings">Action for configuring default app settings.</param>
      <param name="useINI">INI file can be produced in lieu of a UI for configuration.</param>
      <param name="useSQLite">Use SQLite for user configuration storage.</param>
      <param name="useEnvironmentalVariables">Use environmental variables for configuration.</param>
      <param name="splitDescriptionLines">Split long description lines into multiple lines.</param>
      <returns>The configuration builder.</returns>
      <remarks>
            This extension function configures common configuration sources for a Gemstone project. The
            provided parameters control the configuration sources that are available. Handling of settings
            are defined in a hierarchy where the settings are loaded are in the following priority order,
            from lowest to hightest:
            <list type="bullet"><item>INI file (defaults.ini) - Machine Level</item><item>INI file (settings.ini) - Machine Level</item><item>SQLite database (settings.db) - User Level</item><item>Environment variables - Machine Level</item><item>Environment variables - User Level</item></list></remarks>
    </member>
    <member name="T:Gemstone.Configuration.ConnectionStringParser">
      <summary>
            Parses connection strings based on a settings object whose properties
            are annotated with the <see cref="T:Gemstone.Configuration.SerializeSettingAttribute" />.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Configuration.ConnectionStringParser" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser.ComposeConnectionString(System.Object)">
      <summary>
            Serializes the given <paramref name="settingsObject" /> into a connection string.
            </summary>
      <param name="settingsObject">The object whose properties are to be serialized.</param>
      <returns>A connection string containing the serialized properties.</returns>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser.ConvertToPropertyType(System.String,Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty)">
      <summary>
            Converts the given string value to the type of the given property.
            </summary>
      <param name="value">The string value to be converted.</param>
      <param name="property">The property used to determine what type to convert to.</param>
      <returns>The given string converted to the type of the given property.</returns>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser.ConvertToString(System.Object,Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty)">
      <summary>
            Converts the given object to a string.
            </summary>
      <param name="obj">The object to be converted.</param>
      <param name="property">The property which defines the type of the object.</param>
      <returns>The object converted to a string.</returns>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.DefaultEndValueDelimiter">
      <summary>
            Default value for the <see cref="P:Gemstone.Configuration.ConnectionStringParser.EndValueDelimiter" /> property.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.DefaultExplicitlySpecifyDefaults">
      <summary>
            Default value for the <see cref="P:Gemstone.Configuration.ConnectionStringParser.ExplicitlySpecifyDefaults" /> property.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.DefaultKeyValueDelimiter">
      <summary>
            Default value for the <see cref="P:Gemstone.Configuration.ConnectionStringParser.KeyValueDelimiter" /> property.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.DefaultParameterDelimiter">
      <summary>
            Default value for the <see cref="P:Gemstone.Configuration.ConnectionStringParser.ParameterDelimiter" /> property.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.DefaultSerializeUnspecifiedProperties">
      <summary>
            Default value for the <see cref="P:Gemstone.Configuration.ConnectionStringParser.SerializeUnspecifiedProperties" /> property.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.DefaultStartValueDelimiter">
      <summary>
            Default value for the <see cref="P:Gemstone.Configuration.ConnectionStringParser.StartValueDelimiter" /> property.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.ConnectionStringParser.EndValueDelimiter">
      <summary>
            Gets or sets the end value delimiter used to denote the
            end of a value in the cases where the value contains one
            of the delimiters defined for the connection string.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.ConnectionStringParser.ExplicitlySpecifyDefaults">
      <summary>
            Gets or sets the flag that determines whether to explicitly
            specify parameter values that match their defaults when
            serializing settings to a connection string.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser.GetConnectionStringProperties(System.Type)">
      <summary>
            Gets the set of properties which are part of the connection string.
            </summary>
      <param name="settingsObjectType">The type of the settings object used to look up properties via reflection.</param>
      <returns>The set of properties which are part of the connection string.</returns>
    </member>
    <member name="P:Gemstone.Configuration.ConnectionStringParser.KeyValueDelimiter">
      <summary>
            Gets or sets the key-value delimiter used to
            separate keys from values in the connection string.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.ConnectionStringParser.ParameterDelimiter">
      <summary>
            Gets or sets the parameter delimiter used to
            separate key-value pairs in the connection string.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser.ParseConnectionString(System.String,System.Object)">
      <summary>
            Deserializes the connection string parameters into the given <paramref name="settingsObject" />.
            </summary>
      <param name="connectionString">The connection string to be parsed.</param>
      <param name="settingsObject">The object whose properties are to be populated with values from the connection string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settingsObject" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A required connection string parameter cannot be found in the connection string.</exception>
    </member>
    <member name="P:Gemstone.Configuration.ConnectionStringParser.SerializeUnspecifiedProperties">
      <summary>
            Gets or sets the flag that determines whether to include properties which are not
            annotated with the <see cref="T:Gemstone.Configuration.SerializeSettingAttribute" /> in the connection string.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.ConnectionStringParser.StartValueDelimiter">
      <summary>
            Gets or sets the start value delimiter used to denote the
            start of a value in the cases where the value contains one
            of the delimiters defined for the connection string.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser.ToConnectionString(System.Xml.Linq.XElement)">
      <summary>
            Converts XML to a connection string.
            </summary>
      <param name="element">The root element of the XML to be converted to a connection string.</param>
      <returns>A connection string converted from XML.</returns>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser.ToXML(System.String)">
      <summary>
            Converts a connection string to XML.
            </summary>
      <param name="connectionString">The connection string to be converted to XML.</param>
      <returns>The XML root element converted from the connection string.</returns>
      <exception cref="T:System.InvalidOperationException">The connection string does not define exactly one root element.</exception>
    </member>
    <member name="T:Gemstone.Configuration.ConnectionStringParser`1">
      <summary>
            Parses connection strings based on a settings object whose properties
            are annotated with <typeparamref name="TParameterAttribute" />.
            </summary>
      <typeparam name="TParameterAttribute">
            The type of the attribute to search for when determining whether
            to serialize a property to the connection string.
            </typeparam>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Configuration.ConnectionStringParser`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser`1.GetConnectionStringProperties(System.Type)">
      <summary>
            Gets the set of properties which are part of the connection string.
            </summary>
      <param name="settingsObjectType">The type of the settings object used to look up properties via reflection.</param>
      <returns>The set of properties which are part of the connection string.</returns>
    </member>
    <member name="P:Gemstone.Configuration.ConnectionStringParser`1.SerializeUnspecifiedProperties">
      <summary>
            Redefined to throw an exception. This property has no meaning when
            property serialization is determined by the existence of the typed parameter.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.ConnectionStringParser`1.TypeRegistry">
      <summary>
            Gets or sets <see cref="T:Gemstone.Expressions.Evaluator.TypeRegistry" /> instance used for evaluating
            encountered instances of the <see cref="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" /> on modeled
            connection string values that are marked with <typeparamref name="TParameterAttribute" />.
            </summary>
      <remarks>
            Accessing this property will create a unique type registry for the current attribute type
            <typeparamref name="TParameterAttribute" /> which will initially contain the values found in
            the <see cref="P:Gemstone.Expressions.Model.ValueExpressionParser.DefaultTypeRegistry" /> and can be augmented with
            custom types. Set to <c>null</c> to restore use of the default type registry.
            </remarks>
    </member>
    <member name="T:Gemstone.Configuration.ConnectionStringParser`2">
      <summary>
            Parses connection strings based on a settings object whose properties are annotated with
            <typeparamref name="TParameterAttribute" /> and <typeparamref name="TNestedSettingsAttribute" />.
            </summary>
      <typeparam name="TParameterAttribute">
            The type of the attribute to search for when determining whether
            to serialize a property to the connection string.
            </typeparam>
      <typeparam name="TNestedSettingsAttribute">
            The type of the attribute to search for when determining which
            parameters are to be parsed recursively as connection strings.
            </typeparam>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser`2.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Configuration.ConnectionStringParser`2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser`2.ComposeConnectionString(System.Object)">
      <summary>
            Serializes the given <paramref name="settingsObject" /> into a connection string.
            </summary>
      <param name="settingsObject">The object whose properties are to be serialized.</param>
      <returns>A connection string containing the serialized properties.</returns>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser`2.ParseConnectionString(System.String,System.Object)">
      <summary>
            Deserializes the connection string parameters into the given <paramref name="settingsObject" />.
            </summary>
      <param name="connectionString">The connection string to be parsed.</param>
      <param name="settingsObject">The object whose properties are to be populated with values from the connection string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settingsObject" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A required connection string parameter cannot be found in the connection string.</exception>
    </member>
    <member name="T:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty">
      <summary>
            Stores reflected information from a <see cref="F:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.PropertyInfo" />
            object used to parse connection strings.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.#ctor(System.Reflection.PropertyInfo,Gemstone.Expressions.Evaluator.TypeRegistry)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty" /> class.
            </summary>
      <param name="propertyInfo">The <see cref="F:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.PropertyInfo" /> object.</param>
      <param name="typeRegistry">
            Type registry to use when parsing <see cref="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" />
            instances. Set to <c>null</c> for default registry.
            </param>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.Converter">
      <summary>
            The type converter used to convert the value
            of this property to and from a string.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.DefaultValue">
      <summary>
            The default value of the property if its value
            is not explicitly specified in the connection string.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.Names">
      <summary>
            The name of the property as it appears in the connection string.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.PropertyInfo">
      <summary>
            The <see cref="F:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.PropertyInfo" /> object.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.Required">
      <summary>
            Indicates whether or not the property is required
            to be explicitly defined in the connection string.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConnectionStringParser.ConnectionStringProperty.ValidationAttributes">
      <summary>
            Gets all validation attributes that may be applied to the property.
            </summary>
    </member>
    <member name="T:Gemstone.Configuration.Eval">
      <summary>
            Represents an evaluation type used to hold an expression to evaluate
            as well as return the value of the evaluation execution.
            </summary>
      <remarks>
            Expected use of this class is with expression-based <see cref="T:Gemstone.Configuration.Settings" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Configuration.Eval.#ctor(System.String)">
      <summary>
            Represents an evaluation type used to hold an expression to evaluate
            as well as return the value of the evaluation execution.
            </summary>
      <param name="expression">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>expression</parameter>
            <parameter>M:Gemstone.Configuration.Eval.#ctor(System.String)</parameter>
          </include>
        </markup>
      </param>
      <remarks>
            Expected use of this class is with expression-based <see cref="T:Gemstone.Configuration.Settings" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Configuration.Eval.BuildExpressionCompiler">
      <summary>
            Builds a new <see cref="T:Gemstone.Expressions.Evaluator.ExpressionCompiler" /> using the existing <see cref="P:Gemstone.Configuration.Eval.Expression" />
            and the global pre-defined <see cref="P:Gemstone.Configuration.Eval.TypeRegistry" />.
            </summary>
      <returns>New <see cref="T:Gemstone.Expressions.Evaluator.ExpressionCompiler" />.</returns>
    </member>
    <member name="P:Gemstone.Configuration.Eval.Expression">
      <summary>
            Gets or sets the expression to evaluate.
            </summary>
      <remarks>
            Expression is expected to return a value.
            </remarks>
    </member>
    <member name="F:Gemstone.Configuration.Eval.Null">
      <summary>
            Gets an instance of <see cref="T:Gemstone.Configuration.Eval" /> that represents a <c>null</c> expression;
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.Eval.TranspiledExpression">
      <summary>
            Gets or sets the transpiled expression.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.Eval.TypeRegistry">
      <summary>
            Gets the global <see cref="T:Gemstone.Expressions.Evaluator.TypeRegistry" /> used to resolve types for
            <c>[eval]</c> typed settings.
            </summary>
      <remarks>
            Applications can register more types and symbols with this property for use with <c>[eval]</c>
            settings. Ensure the types are registered before settings get bound to configurations sources,
            see <see cref="M:Gemstone.Configuration.Settings.Bind(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />.
            </remarks>
    </member>
    <member name="P:Gemstone.Configuration.Eval.Value">
      <summary>
            Gets or sets the result of the expression evaluation. Value is cached.
            </summary>
      <remarks>
            When <see cref="P:Gemstone.Configuration.Eval.Value" /> is uninitialized, i.e., <c>null</c>, expression
            will be evaluated to acquire a result. Further requests will return
            cached result value. To re-evaluate expression, set <see cref="P:Gemstone.Configuration.Eval.Value" />
            to <c>null</c> before getting property.
            </remarks>
    </member>
    <member name="T:Gemstone.Configuration.EvalConverter">
      <summary>
            Defines a type converter for <see cref="T:Gemstone.Configuration.Eval" /> expressions.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.EvalConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Configuration.EvalConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Configuration.EvalConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Configuration.EvalConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Configuration.SerializeSettingAttribute">
      <summary>
            Represents an attribute that determines if a property or field in a class should
            be serialized to the configuration file.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.SerializeSettingAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Configuration.SerializeSettingAttribute" />; defaults to <c><see cref="P:Gemstone.Configuration.SerializeSettingAttribute.Serialize" /> = true</c>.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.SerializeSettingAttribute.#ctor(System.Boolean)">
      <summary>
            Creates a new <see cref="T:Gemstone.Configuration.SerializeSettingAttribute" /> with the specified <paramref name="serialize" /> value.
            </summary>
      <param name="serialize">
            Assigns flag that determines if the property or field this <see cref="T:Gemstone.Configuration.SerializeSettingAttribute" />
            modifies should be serialized to the configuration file.
            </param>
    </member>
    <member name="P:Gemstone.Configuration.SerializeSettingAttribute.Serialize">
      <summary>
            Gets or sets flag that determines if the property or field this <see cref="T:Gemstone.Configuration.SerializeSettingAttribute" />
            modifies should be serialized to the configuration file.
            </summary>
    </member>
    <member name="T:Gemstone.Configuration.SettingNameAttribute">
      <summary>
            Represents an attribute that defines the setting name of a property or field in a class for settings
            when serializing the value to the configuration file.
            </summary>
      <remarks>
            This attribute allows consumers to override the name of the setting going into the configuration file,
            if the attribute doesn't exist the property or field name is used.
            </remarks>
    </member>
    <member name="M:Gemstone.Configuration.SettingNameAttribute.#ctor(System.String[])">
      <summary>
            Creates a new <see cref="T:Gemstone.Configuration.SettingNameAttribute" /> with the specified <paramref name="names" /> value.
            </summary>
      <param name="names">Assigns name(s) used to serialize setting into config file.</param>
    </member>
    <member name="P:Gemstone.Configuration.SettingNameAttribute.Name">
      <summary>
            Gets the name used to serialize field or property into config file.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SettingNameAttribute.Names">
      <summary>
            Gets the names used to serialize field or property into config file.
            </summary>
    </member>
    <member name="T:Gemstone.Configuration.SQLite.SQLiteConfigurationExtensions">
      <summary>
            Defines extensions for adding the <see cref="T:Gemstone.Configuration.SQLite.SQLiteConfigurationSource" />
            to an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> pipeline.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.SQLite.SQLiteConfigurationExtensions.AddSQLite(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
      <summary>
            Adds the <see cref="T:Gemstone.Configuration.SQLite.SQLiteConfigurationSource" /> to the given <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.
            </summary>
      <param name="builder">The configuration builder.</param>
      <returns>The configuration builder.</returns>
      <remarks>
        <para>The SQLite configuration source will be configured with default parameters.</para>
        <list type="bullet">
          <item>DataSource=%PROGRAMDATA%\[AppName]\settings.db</item>
          <item>TableName=Setting</item>
          <item>ReadOnly=False</item>
        </list>
      </remarks>
    </member>
    <member name="M:Gemstone.Configuration.SQLite.SQLiteConfigurationExtensions.AddSQLite(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Gemstone.Configuration.SQLite.SQLiteConfigurationOptions})">
      <summary>
            Adds the <see cref="T:Gemstone.Configuration.SQLite.SQLiteConfigurationSource" /> to the given <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.
            </summary>
      <param name="builder">The configuration builder.</param>
      <param name="optionsAction">The action called to configure the <see cref="T:Gemstone.Configuration.SQLite.SQLiteConfigurationSource" />.</param>
      <returns>The configuration builder.</returns>
    </member>
    <member name="T:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions">
      <summary>
            Defines parameters for the <see cref="T:Gemstone.Configuration.SQLite.SQLiteConfigurationSource" />.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions.Cache">
      <summary>
            Gets or sets the cahcing mode used
            by connections to the database.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions.ConnectionString">
      <summary>
            Gets the connection string as configured
            by the other properties in this class.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions.DataSource">
      <summary>
            Gets or sets the path to the database file.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions.ForeignKeys">
      <summary>
            Gets or sets the flag that determines whether
            to enable foreign key constraints.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions.Password">
      <summary>
            Gets or sets the encryption key.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions.RecursiveTriggers">
      <summary>
            Gets or sets the flag to indicate whether to enable recursive triggers.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SQLite.SQLiteConfigurationOptions.TableName">
      <summary>
            Gets or sets the name of the table
            that stores configuration parameters.
            </summary>
    </member>
    <member name="T:Gemstone.Configuration.SQLite.SQLiteConfigurationProvider">
      <summary>
            The provider of configuration from a <see cref="T:Gemstone.Configuration.SQLite.SQLiteConfigurationSource" />.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.SQLite.SQLiteConfigurationProvider.#ctor(Gemstone.Configuration.SQLite.SQLiteConfigurationOptions)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Configuration.SQLite.SQLiteConfigurationProvider" /> class.
            </summary>
      <param name="options">The parameters for the configuration source.</param>
    </member>
    <member name="M:Gemstone.Configuration.SQLite.SQLiteConfigurationProvider.Load">
      <summary>
            Loads (or reloads) the data for this provider.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.SQLite.SQLiteConfigurationProvider.Set(System.String,System.String)">
      <summary>
            Sets a value for a given key.
            </summary>
      <param name="key">The configuration key to set.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="T:Gemstone.Configuration.SQLite.SQLiteConfigurationSource">
      <summary>
            The source for configuration stored in a SQLite database.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.SQLite.SQLiteConfigurationSource.#ctor(System.Action{Gemstone.Configuration.SQLite.SQLiteConfigurationOptions})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Configuration.SQLite.SQLiteConfigurationSource" /> class.
            </summary>
      <param name="optionsAction">The action called to set parameters for the source.</param>
    </member>
    <member name="M:Gemstone.Configuration.SQLite.SQLiteConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
      <summary>
            Builds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> from the SQLite configuration source.
            </summary>
      <param name="builder">The configuration builder.</param>
      <returns>The configuration provider.</returns>
    </member>
  </members>
</doc>